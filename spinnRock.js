const maakepCall = require('./bajs.js');
const { DiscordAPIError, MessageEmbed } = require('discord.js');

function snooze(timer) {
  if (timer) {
    clearTimeout(timer);
    timer = 0;
  }
}

function modFull(modFull) {
  let modRader = modFull.split('picked');
  //this number is very good
  const expectedNumberOfNewLines = 6;
  console.log('Modrader √§r nu ' + modRader.length);
  return modRader.length >= expectedNumberOfNewLines;
}

function kapitalisera(string) {
  return string.charAt(0).toUpperCase() + string.slice(1);
}

async function dublettTillr√§ttavisaren(noob, reaction, tr√•den) {
  let tr√§ngningsMeddelande = await tr√•den.send(
    `${kapitalisera(noob.namn)} ${
      reaction.emoji.name
    } has already been picked, please pick another role!`
  );
  setTimeout(() => {
    tr√§ngningsMeddelande.delete();
  }, 5_000);
}

async function skojareTillr√§ttavisaren(noob, tr√•den) {
  try {
    let skojareMeddelande = await tr√•den.send(
      `${kapitalisera(
        noob.namn
      )} you are not allowed to fill when you are last pick >:(`
    );
    setTimeout(() => {
      skojareMeddelande.delete();
    }, 5_000);
  } catch (error) {
    console.error(error);
  }
}

function vadKallasDu(noob) {
  if (noob.id) {
    console.log('Nooben i fr√•ga har ett ID ', noob.id);
    return noob.id;
  } else {
    console.log('Nooben har inte ett id ' + noob.namn);
    console.log(noob);
    return kapitalisera(noob.namn);
  }
}

function ROLLCALL(noobs) {
  let whoYouGonnaCall = [];
  for (const noob of noobs) {
    whoYouGonnaCall.push(vadKallasDu(noob));
  }
  return `${whoYouGonnaCall.join(' ')}, get ready to pick!`;
}

module.exports = {
  spinnRock: async (meddelande) => {
    const v√§ntaNuHurM√•ngaGubbar√ÑrDet = meddelande.content.split(' ');
    const gubbL√§ngdsKollare = v√§ntaNuHurM√•ngaGubbar√ÑrDet.slice(1);
    let LAGGAN_APPROVED_TARDYNESS = 60_000;
    if (gubbL√§ngdsKollare.length == 6) {
      const lastItem = gubbL√§ngdsKollare.pop();
      const newTimeout = parseInt(lastItem, 10);
      console.log(gubbL√§ngdsKollare.length);

      if (isNaN(newTimeout)) {
        meddelande.reply(
          `I don't know what this ${lastItem} is but it ain't a number for sure ü§î. Using standard ${
            LAGGAN_APPROVED_TARDYNESS / 1000
          }s of delay.`
        );
      } else {
        LAGGAN_APPROVED_TARDYNESS = newTimeout;

        if (newTimeout / 1000 < 1) {
          meddelande.reply(
            `I like your style. Using ${
              newTimeout / 1000
            }s of delay. Better go quick ü¶æü¶æü¶æ`
          );
        } else {
          meddelande.reply(
            `You have chosen to change the flow of time for your party - now each medlem has ${
              newTimeout / 1000
            }s to pick their role.`
          );
        }
      }
    }

    if (gubbL√§ngdsKollare.length == 5) {
      let tr√•dNamn = `The ${meddelande.member.displayName} party`;

      let i = 0;
      let dummyArray = await maakepCall.maakepCall(gubbL√§ngdsKollare.join(' '));
      const tr√•den = await meddelande.channel.threads.create({
        name: tr√•dNamn,
        autoArchiveDuration: 60,
        reason: 'Time to set up your dota party!',
      });
      //const tr√•den = meddelande.channel.threads.cache.find((x) => {
      //  return x.name === tr√•dNamn;
      //});
      if (tr√•den.joinable) await tr√•den.join();

      let tr√•dMeddelande = await tr√•den.send(
        `Please wait for the bot to set up :)`
      );
      let modMeddelande = '';
      for (dummy of dummyArray) {
        console.log('Logging, ', dummy);
        modMeddelande += `${kapitalisera(dummy.namn)}...\n`;
        console.log('modMeddelande: ' + modMeddelande);
      }
      //GL√ñM INTE TA MED INTENTS
      await tr√•dMeddelande.react('1Ô∏è‚É£');
      await tr√•dMeddelande.react('2Ô∏è‚É£');
      await tr√•dMeddelande.react('3Ô∏è‚É£');
      await tr√•dMeddelande.react('4Ô∏è‚É£');
      await tr√•dMeddelande.react('5Ô∏è‚É£');
      await tr√•dMeddelande.react('935684531023925299');
      tr√•dMeddelande.edit(modMeddelande);
      let pickladeRoller = [];
      const emojiSiffror = ['1Ô∏è‚É£', '2Ô∏è‚É£', '3Ô∏è‚É£', '4Ô∏è‚É£', '5Ô∏è‚É£'];
      const emojiDic = {
        '1Ô∏è‚É£': '1',
        '2Ô∏è‚É£': '2',
        '3Ô∏è‚É£': '3',
        '4Ô∏è‚É£': '4',
        '5Ô∏è‚É£': '5',
      };
      let fillBoys = [];
      let aktivaNoobs = dummyArray;
      let √§ggKlockan;
      let pingMeddelande;

      pingMeddelande = await tr√•den.send(ROLLCALL(dummyArray));

      searchAndDestroy(dummyArray, 199);

      const collector = tr√•dMeddelande.createReactionCollector({
        filter: (_, user) => !user.bot,
        time: 360_000,
        max: 100,
      });
      //Den h√§r stannar pga rollKoll
      function skufflaPreferens() {
        let slumpadeEmojis = shuffleArray(emojiSiffror);
        for (emoji in slumpadeEmojis) {
          if (rollKoll(slumpadeEmojis[emoji]) == 'vanlig') {
            return slumpadeEmojis[emoji];
          }
        }
      }
      //Den h√§r stannar eftersom den anv√§nder rollKoll
      function hittaOchKollaPreferens(noobs) {
        //kolla om v√•r noob har en preferens, har den det s√• nice
        switch (true) {
          case pickladeRoller.length == 4:
            console.log(
              'Picklade roller s√§ger att det bara finns 1 roll kvar s√• fuck this'
            );
            break;
          case noobs[i].preferences !== undefined:
            console.log(
              'Vi hittade preferenser f√∂r ' + noobs[i] + ' de ser ut s√•h√§r',
              noobs[i].preferences
            );
            let preferenser = noobs[i].preferences;
            for (f√∂redragen of preferenser) {
              if (rollKoll(emojiSiffror[f√∂redragen - 1]) == 'vanlig') {
                console.log('Vi hittade preferensen ' + f√∂redragen);
                console.log(
                  'S√• emojin vi skickar √§r ' + emojiSiffror[f√∂redragen - 1]
                );
                //Vi anv√§nder roll-koll f√∂r att hitta vad som r√§knas som en "vanlig" pick och sen tjongar vi iv√§g den. Det √§r funky n√§r vi √∂vers√§tter preferens till emojiSiffror eftersom
                //Den ena b√∂rjar p√• 0 och den andra p√• 1 men det verkar funka :)
                return emojiSiffror[f√∂redragen - 1];
              }
            }
            return '<:fill:935684531023925299>';
        }
        console.log('Vi shufflar personens preferens pga yolo');
        return skufflaPreferens();
      }
      //Den h√§r k√∂r finska fighten bla s√• den m√•ste stanna
      async function autoPicker(reaktion, noobs) {
        console.log(
          'Nu k√∂r vi automatiska versionen! F√∂rst kollar vi om vi f√•tt fill'
        );
        if (reaktion == 'fill' || reaktion == '<:fill:935684531023925299>') {
          console.log(reaktion + '√§r fill! Vi k√∂r fillBoys');
          fillBoysNeedFilling(noobs);
        } else {
          console.log(
            'Det √§r inte fill, s√• auto picker l√•ter ' +
              noobs[i] +
              ' picka ' +
              reaktion
          );
          await standardPick(reaktion, noobs, LAGGAN_APPROVED_TARDYNESS / 1000);
          console.log('Sen h√§mta n√§sta noob!');
          await finskaFighten(noobs);
        }
      }
      //Den h√§r anv√§nder Hittaochkollapreferens som anv√§nder roll koll
      async function searchAndDestroy(noobs, row) {
        //destroy the last message
        try {
          await pingMeddelande.delete();
        } catch (error) {
          console.error('Failed to delete the message: ', error);
        }
        //seach for new guy
        try {
          let f√∂redragen = hittaOchKollaPreferens(noobs);
          let pingNoob = vadKallasDu(aktivaNoobs[i]);
          pingMeddelande = await tr√•den.send(
            `${pingNoob}, your turn to pick. If you do not pick within 60 seconds you will be assigned ${f√∂redragen}`
          );
          console.log(
            `${pingNoob} kommer asignas ${f√∂redragen} om ${
              LAGGAN_APPROVED_TARDYNESS / 1000
            } sekunder, ${row}`
          );
          //Vi s√§tter en √§ggklocka, men ser f√∂rst till att vi avslutar den tidigare (om det finns n√•gon)
          snooze(√§ggKlockan);

          console.log('Timern √§r just nu p√•: ' + LAGGAN_APPROVED_TARDYNESS);
          √§ggKlockan = setTimeout(async function () {
            await autoPicker(f√∂redragen, aktivaNoobs);
          }, LAGGAN_APPROVED_TARDYNESS);
        } catch (error) {
          console.error('Failed to send the message: ', error);
        }
      }
      //Den h√§r beh√∂ver en lokal picklade roller, s√• den m√•ste stanna
      function rollKoll(reaktion) {
        let vanligPick = emojiSiffror.includes(reaktion);
        if (vanligPick) {
          if (pickladeRoller.includes(reaktion)) {
            return 'ogiltig';
          } else {
            return 'vanlig';
          }
        } else {
          return 'fill';
        }
      }
      //Den h√§r beh√∂ver rollkoll s√• den m√•ste stanna
      async function standardPick(reaktion, noobs, timeToPick) {
        let riktigReact;

        const start = performance.now();

        console.log('Kolla om v√•r reaktion har ett namn ');
        if (reaktion.emoji) {
          console.log("'Den har ett namn!", reaktion.emoji.name);
          riktigReact = reaktion.emoji.name;
        } else {
          console.log('Den har inte ett namn!', reaktion);
          riktigReact = reaktion;
        }
        if (rollKoll(riktigReact) == 'vanlig') {
          pickladeRoller.push(riktigReact);
          console.log('Picklade roller just nu √§r: ', pickladeRoller);
        }

        const end = performance.now();
        const elapsedTime =
          timeToPick || parseFloat(end - start).toFixed(2) * 1000;

        let modRader = modMeddelande.split('\n');

        modRader[i] = `${kapitalisera(
          noobs[i].namn
        )} \`[${elapsedTime}ms]\` has picked ${riktigReact}!`;
        modMeddelande = modRader.join('\n');
        try {
          await tr√•dMeddelande.edit(modMeddelande);
        } catch (error) {
          console.error('Failed to edit the message: ', error);
        }
        i++;
      }
      //Den h√§r m√•ste stanna punkt slut
      async function finskaFighten(noobs) {
        //snooze(√§ggKlockan);
        if (!modFull(modMeddelande)) {
          console.log(
            'Alla noobs har inte valt roll eller fill, vi beh√∂ver fler'
          );
          await searchAndDestroy(noobs, 340);
        } else {
          console.log(
            'Alla har pickat roll eller fill, nu ska vi kolla om vi beh√∂ver byta array'
          );
          if (fillBoys.length > 0) {
            console.log(
              'Vi har boys i fill boys, vi switchar aktiv array, √•terst√§ller i och kallar p√• n√§sta boy'
            );
            if (pickladeRoller.length === 5) {
              console.log(
                'Vi har alla roller pickade, rollerna √§r ',
                pickladeRoller
              );
              console.log('Allts√• kan vi avsluta');
              //snooze(√§ggKlockan);
              collector.stop();
            } else {
              console.log('Nu ska vi kolla om aktiva noobs √§r dummy array:');
              console.log(aktivaNoobs == dummyArray);
              if (aktivaNoobs == dummyArray) {
                aktivaNoobs = dummyArray.concat(fillBoys);
                console.log(
                  'Nu f√∂rs√∂ker vi tjonga in fillBoys i aktivaNoobs, aktiva noobs ser ut s√•h√§r: '
                );
                console.log(aktivaNoobs);
                console.log('Index ligger p√•: ' + i);
                //i = 0;
              }
              console.log('Nu ska vi b√∂rja tjonga fill boys, och i = ' + i);
              //aktivaNoobs = fillBoys;
              //console.log('H√§r √§r fill boys: ');
              //console.log(fillBoys[i]);
              await searchAndDestroy(aktivaNoobs, 361);
            }
          } else {
            console.log(
              'Fillboys √§r tom, vi beh√∂ver inte byta och avslutar...'
            );
            snooze(√§ggKlockan);
            collector.stop();
          }
        }
      }
      //Den h√§r beh√∂ver SearchAndDestroy, den stannar
      async function fillBoysNeedFilling(noobs) {
        let modRader = modMeddelande.split('picked');
        if (modRader.length >= 6) {
          console.log(
            'Nu √§r modrader f√∂r l√•ng, nu f√•r man inte fill och nu kommer mobbningen'
          );
          await skojareTillr√§ttavisaren(noobs[i], tr√•den);
        } else {
          //Vi fyller fillBoys med boys looking to fill. Sen h√§mtar vi n√§sta person som ska rakas
          console.log('N√•gon har valt fill, s√• vi s√§tter hen i fillboys');
          fillBoys.unshift(dummyArray[i]);
          await standardPick('<:fill:935684531023925299>', noobs);
          await searchAndDestroy(noobs, 419);
        }
      }

      collector.on('collect', async (reaction, user) => {
        console.log(
          'Vi har f√•tt en react och ska nu utv√§rdera om den √§r vanlig, dublett eller fill'
        );
        let kolladReaktion = rollKoll(reaction.emoji.name);
        switch (true) {
          case kolladReaktion == 'vanlig':
            console.log(
              'Picken √§r vanlig, s√• vi k√∂r standardPick. Efter det h√§r utv√§rderar vi om vi beh√∂ver fler noobs eller inte.'
            );
            //om det √§r en standard pick
            await standardPick(reaction, aktivaNoobs);
            //Avsluta det hela genom att kalla nya noobs, men bara om vi beh√∂ver fler noobs (dvs om modFull inte √§r full)
            await finskaFighten(aktivaNoobs);
            break;

          case kolladReaktion == 'ogiltig':
            //Ogiltig roll (mobba!)
            console.log('N√•gon har gjort funny business, s√• vi mobbar');
            await dublettTillr√§ttavisaren(aktivaNoobs[i], reaction, tr√•den);
            break;

          case kolladReaktion == 'fill':
            fillBoysNeedFilling(aktivaNoobs);
            break;
        }
      });

      collector.on('end', async (collected) => {
        console.log('NU √ÑR VI F√ñRMODLIGEN KLARA');
        //St√§ng av klockan och plocka bort pingmeddelande om det finns
        snooze(√§ggKlockan);
        if (pingMeddelande) {
          try {
            pingMeddelande.delete();
          } catch (error) {
            console.error(error);
          }
        }
        //Formatera om √∂versta posten
        let modRader = modMeddelande.split('\n');
        let finsktMeddelande = '';
        function aOchO(str√§ng) {
          console.log(str√§ng);
          let nyStr√§ng = str√§ng.replace('!', '');
          let aOchO = nyStr√§ng.split(' ');
          return `${aOchO[0]} ${emojiDic[aOchO.pop()]}`;
        }
        for (rad of modRader) {
          if (
            rad.includes(emojiSiffror[0]) ||
            rad.includes(emojiSiffror[1]) ||
            rad.includes(emojiSiffror[2]) ||
            rad.includes(emojiSiffror[3]) ||
            rad.includes(emojiSiffror[4])
          ) {
            finsktMeddelande += `${aOchO(rad)} `;
            console.log('Den h√§r raden tjongar vi in i aOchO ', rad);
          }
        }
        await embedMaker(modMeddelande, finsktMeddelande, tr√•dNamn, tr√•den);
      });
    } else {
      meddelande.reply('Wrong amount of dudes, dude!');
    }
  },
};

async function embedMaker(modMeddelande, finsktMeddelande, tr√•dNamn, tr√•den) {
  console.log(modMeddelande);
  const exampleEmbed = new MessageEmbed()
    .setColor('#ff60cc')
    .setTitle(`${tr√•dNamn}`)
    .setDescription(`These are the fates you chose`)
    .setFooter({ text: `${finsktMeddelande}` });

  exampleEmbed.addField('Your picks, sirs...', modMeddelande, false);

  await tr√•den.send({ embeds: [exampleEmbed] });
}

//BELOW THIS LINE IS AUTHENTIC MAAKEP CODE, DO NOT MAKE ANY CHANGES AS IT IS THE ENGINE WHICH DRIVES THE ENTIRE PROJECT\\

function shuffleArray(arr) {
  const array = [...arr];
  for (let i = array.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [array[i], array[j]] = [array[j], array[i]];
  }
  return array;
}

//ABOVE THIS LINE IS AUTHENTIC MAAKEP CODE, DO NOT MAKE ANY CHANGES AS IT IS THE ENGINE WHICH DRIVES THE ENTIRE PROJECT\\
