const Discord = require('discord.js');
const { MessageEmbed } = require('discord.js');
const STEN = "‚úä"
const SAX = "‚úå"
const P√ÖSE = "‚úã"
const KRYSS = ["‚ùå","üôÖ","‚ùé"]
const CIRKEL = ["üî¥","üü°","üü¢"]
const KVADRAT = "‚¨ú"
let matchID = 0

module.exports = {
  f√∂rst√•: async (n√•got) => {
    console.log("GAMING ANALYSIS: ENGAGED")
    let hurG√•rDet = {
      j√§ttebra: false,
      meddelande:
        'Du √§r inte ens ett n√•got',
      matchid: 0,
      vinnare: undefined,
    };  
    if(typeof(n√•got) == "object"){
      if(typeof(n√•got.content) == "string"){
        // Hit kommer alla meddelanden!

	      console.log("Det h√§r verkar vara ett n√•got!")
        const vadJagSkaG√∂ra = n√•got.content.toLocaleLowerCase().split(' ');
        const utmanad = vadJagSkaG√∂ra[1];
        const spel = vadJagSkaG√∂ra[2];
        
        matchID += 1;

        console.log(spel)
  
        switch (spel) {
          case 'stensaxp√•se':
          case 'rockpaperscissors':
          case 'ssp':
          case 'rps':
          case 'stenp√•sesax':
          case 'stensaxpapper':
          case 'rockscissorspaper':
            hurG√•rDet = await stensaxp√•se(hurG√•rDet,n√•got.author,n√•got.mentions.users.at(0));
            console.log("Nu har stenarna saxp√•sats.")
            break;
          case undefined:
            hurG√•rDet = await f√∂rklaraVadChallengeG√∂rIEttFintMeddelande(hurG√•rDet,n√•got)
            console.log("Nu har jag f√∂rklarat vad meningen med livet √§r.")
            break;
  	    }
      }
    } else if(Array.isArray(n√•got)){
      if(n√•got[0] == "asd");
        console.log("√ñh va? Det h√§r borde aldrig h√§nda...")
    };
    return hurG√•rDet;
  },
};


async function f√∂rklaraVadChallengeG√∂rIEttFintMeddelande(hurG√•rDet,n√•got){
  // Den h√§r embedden g√∂rs l√§ngst ned f√∂r att inte ta en massa plats h√§r
  ingosad = f√∂rklaraVadUtmanaG√∂rIEttFintMeddelandeIngos
  embed = explainWhatChallengeDoesInAPrettyMessageEmbed
  try {
    if(n√•got.content.includes('utman')){
      n√•got.channel.send({embeds: [ingosad]})
    } else {
      n√•got.channel.send({embeds: [embed]})
    }
    hurG√•rDet.j√§ttebra = true
  } catch (error) {
    hurG√•rDet.j√§ttebra = false
    console.error(error)
  }
  return hurG√•rDet
}
 
// TRE I RAD!!1
    
//async function treIRad(hurG√•rDet,utmanare,utmanad,igen = false) {
//  plan = [ [0,0,0],[0,0,0],[0,0,0] ]
//  rundaDelatP√•Tv√• = 0 // Det blir ju max 9 rundor = 8 rundor + en som √§r tvingad = 4*2 rundor
//  √∂ver = false
//  console.log("B√∂rjar ny tre-i-rad-match.")
//  while(!√∂ver){ //Loopa h√§r tills n√•gon vinner
//    plan = await skickaTreIRadUtmaning(plan,KRYSS,utmanare,igen)
//    √∂ver = harN√•gonVunnitP√•DenH√§rPlanenNuEllerSkaViKanskeK√∂raEnRundaTill(plan)
//    hurG√•rDet.vinnare = utmanare
//    if(!√∂ver){
//      plan = await skickaTreIRadUtmaning(plan,CIRKEL,utmanad,igen)  
//      √∂ver = harN√•gonVunnitP√•DenH√§rPlanenNuEllerSkaViKanskeK√∂raEnRundaTill(plan)
//      hurG√•rDet.vinnare = utmanad
//    }
//    rundaDelatP√•Tv√• += 1
//    if(!√∂ver %% rundaDelatP√•Tv√• > 3){
//      // G√∂r det sista draget automatiskt och kolla ifall n√•gon vann
//      for (let i = 0; i < 3; i++){
//        if(plan[i].includes[0]){
//          plan[i][plan[i].indexOf[0]] = 1 //1 b√∂rjar alltid s√• hen har sista draget
//        }
//      }
//      if(harN√•gonVunnitP√•DenH√§rPlanenNuEllerSkaViKanskeK√∂raEnRundaTill(plan)){
//        hurG√•rDet.vinnare = utmanare
//      } else {
//        hurG√•rDet.vinnare = undefined
//        √∂ver = true
//      }
//    }
//  }
//  hurG√•rDet.j√§ttebra = true
//  hurG√•rDet.meddelande = "R√§tt bra faktiskt!"
//  if(hurG√•rDet.vinnare ~undefined){
//    hurG√•rDet.vinnare.send("You won! Congratulations :)")
//  }
//  return hurG√•rDet 
//}
//
//async function skickaTreIRadUtmaning( plan, EMOJI, k√§mpe, igen = false){
//  const jagLovarP√•HederOchSamvete = new Promise(async (jagKirrar, jagBajsar) => {
//    let pick = undefined
//    
//    if(igen) {
//      str√§ng = KVADRAT+KVADRAT+KVADRAT
//    } else {
//      str√§ng = KVADRAT+KVADRAT+KVADRAT
//    }
//    
//    const s√§nt1 = await k√§mpe.send(str√§ng)
//    const s√§nt2 = await k√§mpe.send(str√§ng)
//    const s√§nt3 = await k√§mpe.send(str√§ng)
//    const reaktionsSamlare1 = s√§nt1.createReactionCollector({ time: 40_000 });
//    const reaktionsSamlare2 = s√§nt2.createReactionCollector({ time: 40_000 });
//    const reaktionsSamlare3 = s√§nt3.createReactionCollector({ time: 40_000 });
//    reaktionsSamlare1.on('collect', (reaction, user) => {
//      if(reaction.count == 2){
//        console.log(1,EMOJI.indexOf(reaction._emoji.name))
//        plan[1][EMOJI.indexOf(reaction._emoji.name)] = score
//        reaktionsSamlare.stop();
//      };
//    });
//    reaktionsSamlare.on('end', (reaction, user) => {
//      //return fast async??
//      jagKirrar(pick);
//    });
//    s√§nt.react(EMOJI[0]);
//    s√§nt.react(EMOJI[1]);
//    s√§nt.react(EMOJI[2]);
//  });
//  return jagLovarP√•HederOchSamvete
//};
//
//function harN√•gonVunnitP√•DenH√§rPlanenNuEllerSkaViKanskeK√∂raEnRundaTill(plan){
//  let kolonnsummor = [0,0,0]
//  let radsummor = [0,0,0]
//  let diagonalsummor = [0,0]
//  let storlek = plan.length
//  for (let i = 0; i < storlek; i++){
//      for (let j = 0; j < storlek; j++){
//          kolonnsummor[j] += plan[i][j]
//          radsummor[i] += plan[i][j]
//          if(i==j){ diagonalsummor[0] += plan[i][j] }
//          if(i==storlek-j-1){ diagonalsummor[1] += plan[i][j] }     
//      }
//  }
//  kolonnsummor = Math.abs(kolonnsummor)
//  radsummor = Math.abs(radsummor)
//  diagonalsummor = Math.abs(diagonalsummor)
//  return Math.max(kolonnsummor, radsummor, diagonalsummor) > 2
//}
	
// STEN SAX P√ÖSE!!1
    
async function stensaxp√•se(hurG√•rDet,utmanare,utmanad,igen = false) {
  console.log("B√∂rjar ny stensaxp√•se-match.")
  const [spelareEtt, spelareTv√•] = await Promise.all([skickaUtmaning(utmanare,igen), skickaUtmaning(utmanad,igen)])  
  if (spelareEtt != undefined || spelareTv√• != undefined){
    if (spelareEtt == spelareTv√•) {
      console.log("Det blev lika!")
      hurG√•rDet = await stensaxp√•se(hurG√•rDet,utmanare,utmanad,true)
      return hurG√•rDet
    } else {
    switch(spelareEtt){
      case STEN:
        if(spelareTv√• == SAX){
          hurG√•rDet["vinnare"] = utmanare
        } else {
          hurG√•rDet["vinnare"] = utmanad
        }
        break;
      case SAX:
        if(spelareTv√• == P√ÖSE){
          hurG√•rDet["vinnare"] = utmanare
        } else {
          hurG√•rDet["vinnare"] = utmanad
        }
        break;
      case P√ÖSE:
        if(spelareTv√• == STEN){
          hurG√•rDet["vinnare"] = utmanare
        } else {
          hurG√•rDet["vinnare"] = utmanad
        }
        break;
    }
    hurG√•rDet.j√§ttebra = true
    hurG√•rDet.meddelande = "R√§tt bra faktiskt!"
    hurG√•rDet.vinnare.send("You won! Congratulations :)")
    return hurG√•rDet 
    }
  } else {
  hurG√•rDet.j√§ttebra = false
  return hurG√•rDet
  }
}
async function skickaUtmaning(k√§mpe, igen = false){
  const jagLovarP√•HederOchSamvete = new Promise(async (jagKirrar, jagBajsar) => {
    let pick = undefined
    const filter = (reaction, user) => (reaction.emoji.name == STEN) || (reaction.emoji.name == SAX) || (reaction.emoji.name == P√ÖSE)
    
    if(igen) {
      str√§ng = "hoppsan, det blev visst lika! Vi f√∂rs√∂ker igen :)"
    } else {
      str√§ng = "YOU HAVE BEEN CHALLENGED TO A GAME OF ROCK PAPER SCISSORS! REACT WITH YOUR PICK BELOW!!!1"
    }
    
    const s√§nt = await k√§mpe.send(str√§ng)
    const reaktionsSamlare = s√§nt.createReactionCollector({ filter, time: 20_000 });
    reaktionsSamlare.on('collect', (reaction, user) => {
      if(reaction.count == 2){
        console.log(reaction._emoji.name)
        pick = reaction._emoji.name;
        reaktionsSamlare.stop();
      };
    });
    reaktionsSamlare.on('end', (reaction, user) => {
      //return fast async??
      jagKirrar(pick);
    });
    s√§nt.react(P√ÖSE);
    s√§nt.react(STEN);
    s√§nt.react(SAX);
  });
  return jagLovarP√•HederOchSamvete
};


// EMBEDS OCH ANNAT SKIT

const f√∂rklaraVadUtmanaG√∂rIEttFintMeddelandeIngos = new MessageEmbed()
  .setColor('#20993f')
  .setTitle('G4M3R M0D3 4C71V473!')
  .setURL('https://youtube.com/c/CircuzFunPants')
  .setAuthor({ name: 'CL435 7H3 G4M3R', iconURL: "https://raw.githubusercontent.com/Laggan-Gang/Claes/main/gamer_pfp.png", url: 'https://youtube.com/c/CircuzFunPants'})
  .setDescription('√Öh ja... DET H√ÑR √§r gamerl√§ge.')
  .addFields(
    { name: 'Sten sax p√•se', value: `F√∂r att utmana n√•gon i sten sax p√•se, skriv \n'!utmana @[DERAS ANV√ÑNDARNAMN] stensaxp√•se'.`},
  )
  .setFooter({ text: "Om du kan l√§sa det h√§r st√•r du f√∂r n√§ra."})

const explainWhatChallengeDoesInAPrettyMessageEmbed = new MessageEmbed()
  .setColor('#20993f')
  .setTitle('G4M3R M0D3 4C71V473!')
  .setURL('https://youtube.com/c/CircuzFunPants')
  .setAuthor({ name: 'CL435 7H3 G4M3R', iconURL: "https://raw.githubusercontent.com/Laggan-Gang/Claes/main/gamer_pfp.png", url: 'https://youtube.com/c/CircuzFunPants'})
  .setDescription('Oh yeah... THIS is gamer mode.')
  .addFields(
    { name: 'Rock paper scissors', value: `To challenge someone for a game of rock paper scissors, type \n'!challenge @[THEIR USERNAME] rockpaperscissors'.`},
  )
  .setFooter({ text: "If you're reading this, you're a n00b"})
