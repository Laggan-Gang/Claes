const Discord = require('discord.js');
const { MessageEmbed } = require('discord.js');
const STEN = "‚úä"
const SAX = "‚úå"
const P√ÖSE = "‚úã"
const KRYSS = ["‚ùå","üôÖ","‚ùé"]
const CIRKEL = ["üî¥","üü°","üü¢"]
const KVADRAT = "‚¨ú"
const BOMB = "üí•"
const SIFFROR = [":zero:",":one:",":two:",":three:",":four:",":five:",":six:",":seven:",":eight:"]
let matchID = 0

module.exports = {
  f√∂rst√•: async (n√•got) => {
    console.log("GAMING ANALYSIS: ENGAGED")
    let hurG√•rDet = {
      j√§ttebra: false,
      meddelande:
        'Du √§r inte ens ett n√•got',
      matchid: 0,
      vinnare: undefined,
    }; 
    // {}.toString.call(n√•got) 
    if(typeof(n√•got) == "object"){
      if(typeof(n√•got.content) == "string"){
        // Hit kommer alla meddelanden!

	      console.log("Det h√§r verkar vara ett n√•got!")
        const vadJagSkaG√∂ra = n√•got.content.toLocaleLowerCase().split(' ');
        const utmanad = vadJagSkaG√∂ra[1];
        const spel = vadJagSkaG√∂ra[2];
        
        matchID += 1;

        console.log(spel)
  
        switch (spel) {
          case 'r√∂j':
          case 'minesweeper':
            hurg√•rdet = await r√∂j(hurG√•rDet,n√•got,vadJagSkaG√∂ra[3],vadJagSkaG√∂ra[4])
            console.log("Nu √§r det f√§rdigr√∂jt.");
            break;
          case 'tripptrapptrull':
          case 'treirad':
          case 'tictactoe':
          case 'ttt':
          case 'tir':
            hurG√•rDet = await treIRad(hurG√•rDet,n√•got.author,n√•got.mentions.users.at(0));
            console.log("Nu √§r det f√§rdigtreiradat.")
            break;
          case 'stensaxp√•se':
          case 'rockpaperscissors':
          case 'ssp':
          case 'rps':
          case 'stenp√•sesax':
          case 'stensaxpapper':
          case 'rockscissorspaper':
            hurG√•rDet = await stensaxp√•se(hurG√•rDet,n√•got.author,n√•got.mentions.users.at(0));
            console.log("Nu har stenarna saxp√•sats.")
            break;
          case undefined:
            hurG√•rDet = await f√∂rklaraVadChallengeG√∂rIEttFintMeddelande(hurG√•rDet,n√•got)
            console.log("Nu har jag f√∂rklarat vad meningen med livet √§r.")
            break;
  	    }
      }
    } else if(Array.isArray(n√•got)){
      if(n√•got[0] == "asd");
        console.log("√ñh va? Det h√§r borde aldrig h√§nda...")
    };
    return hurG√•rDet;
  },
};


async function f√∂rklaraVadChallengeG√∂rIEttFintMeddelande(hurG√•rDet,n√•got){
  // Den h√§r embedden g√∂rs l√§ngst ned f√∂r att inte ta en massa plats h√§r
  ingosad = f√∂rklaraVadUtmanaG√∂rIEttFintMeddelandeIngos
  embed = explainWhatChallengeDoesInAPrettyMessageEmbed
  try {
    if(n√•got.content.includes('utman')){
      n√•got.channel.send({embeds: [ingosad]})
    } else {
      n√•got.channel.send({embeds: [embed]})
    }
    hurG√•rDet.j√§ttebra = true
  } catch (error) {
    hurG√•rDet.j√§ttebra = false
    console.error(error)
  }
  return hurG√•rDet
}

// 
    
async function r√∂j(hurG√•rDet,n√•got,textstorlek, textsv√•righetsgrad = 0.2){
  storlek = parseInt(textstorlek);
  sv√•righetsgrad = parseFloat(textsv√•righetsgrad);
  if (sv√•righetsgrad == NaN) {
    n√•got.reply("Vad ska det betyda? Jag vill ha sv√•righetsgrad " + textstorlek + "? Alla vet v√§l att sv√•righetsgrader √§r definierade som ett tal mellan noll och ett?:rolling_eyes:");
  }
  if (storlek == NaN) {
    n√•got.reply("Vad ska det betyda? Jag vill ha en plan av storlek " + textstorlek + "?");
  }
  if (storlek > (Math.random()*80 + 100)) {
    n√•got.reply("Oj! S√• d√§r stor plan beh√∂vs v√§l inte... Det h√§r blir bra: ")
    storlek = 3
    sv√•righetsgrad = 0.88888
  }
  console.log("sv√•righetsgrad: "+sv√•righetsgrad)
  console.log("B√∂rjar r√∂ja")
  plan = Array(storlek).fill([]);
  for (let i=0; i < storlek; i++){                        // G√∂r en plan med bara nollor
    plan[i] = Array(storlek).fill(0);
  }
  antalBomber = Math.ceil(sv√•righetsgrad * storlek * storlek)   // S√• h√§r m√•nga bomber ska det vara
  console.log("antalBomber: " + antalBomber)
  // Placera ut alla bomber
  for (let i=0; i < antalBomber; i++){ 
    let x = Math.floor(Math.random() * storlek); // H√§r ska dom vara
    let y = Math.floor(Math.random() * storlek);
    if (plan[x][y] != BOMB){ // √Ñr det ingen bomb h√§r?
      plan[x][y] = BOMB;
      for (let dx = Math.max(x-1,0); dx <= Math.min(x+1,storlek-1); dx++){
        for (let dy = Math.max(y-1,0); dy <= Math.min(y+1,storlek-1); dy++){
          if (plan[dx][dy] != BOMB){
            plan[dx][dy] += 1;
          };
        };
      };
    } else { i -= 1 }; // G√∂r om om det redan √§r en bomb h√§r
  }
  console.log("H√§r √§r planen: " + plan)
  // Skapa meddelandet
  meddelande = ""
  for (let i=0; i < storlek; i++){
    for (let j=0; j < storlek; j++){
      meddelande += "||";
      if (plan[i][j] == BOMB) { meddelande += BOMB }
      else { meddelande += SIFFROR[plan[i][j]] };
      meddelande += "||";
    };
    if (storlek > 9){
      n√•got.channel.send(meddelande);
      meddelande = "";
    } else {
      meddelande += "\n"
    }
  };
  if (meddelande != ""){
    n√•got.channel.send(meddelande);
  }
  n√•got.channel.send(BOMB + ": " + antalBomber);
}

  
  
// TRE I RAD!!1
    
async function treIRad(hurG√•rDet,utmanare,utmanad,igen = false) {
  plan = [ [0,0,0],[0,0,0],[0,0,0] ]
  rundaDelatP√•Tv√• = 0 // Det blir ju max 9 rundor = 8 rundor + en som √§r tvingad = 4*2 rundor
  √∂ver = false
  while(!√∂ver){ //Loopa h√§r tills n√•gon vinner
    plan = await skickaTreIRadUtmaning(plan,KRYSS,utmanare, igen)
    √∂ver = harN√•gonVunnitP√•DenH√§rPlanenNuEllerSkaViKanskeK√∂raEnRundaTill(plan)
    hurG√•rDet.vinnare = utmanare
    if(!√∂ver){
      plan = await skickaTreIRadUtmaning(plan,CIRKEL,utmanad,igen)  
      √∂ver = harN√•gonVunnitP√•DenH√§rPlanenNuEllerSkaViKanskeK√∂raEnRundaTill(plan)
      hurG√•rDet.vinnare = utmanad
    }
    rundaDelatP√•Tv√• += 1
    if(!√∂ver && rundaDelatP√•Tv√• > 3){
      √∂ver = true
      // G√∂r det sista draget automatiskt och kolla ifall n√•gon vann
      for (let i = 0; i < 3; i++){
        if(plan[i].includes(0)){
          plan[i][plan[i].indexOf(0)] = 1 //1 b√∂rjar alltid s√• hen har sista draget
        }
      }
      if(harN√•gonVunnitP√•DenH√§rPlanenNuEllerSkaViKanskeK√∂raEnRundaTill(plan)){
        hurG√•rDet.vinnare = utmanare
      } else {
        utmanad.send("Rats! It's a tie. Here's the final board:")
        utmanare.send("Rats! It's a tie. Here's the final board:")
        s√§ndPlan(plan,utmanad)
        s√§ndPlan(plan,utmanare)
        hurG√•rDet.vinnare = undefined
      }
    }
  }
  hurG√•rDet.j√§ttebra = true
  hurG√•rDet.meddelande = "R√§tt bra faktiskt!"
  if(hurG√•rDet.vinnare != undefined){
    if(hurG√•rDet.vinnare == utmanare){
      utmanare.send("Number one victory real B)")
      utmanare.send("Here's the final board:")
      utmanad.send("You lost... but they probably cheated anyways.")
      utmanad.send("Here's the final board:")
      s√§ndPlan(plan,utmanad)
      s√§ndPlan(plan,utmanare)
    } else {
      utmanad.send("Number one victory real B)")
      utmanad.send("Here's the final board:")
      utmanare.send("You lost... but they probably cheated anyways.")
      utmanare.send("Here's the final board:")
      s√§ndPlan(plan,utmanad)
      s√§ndPlan(plan,utmanare)
    }
    hurG√•rDet.vinnare.send("You won! Congratulations :)")
  }
  return hurG√•rDet 
}

async function s√§ndPlan(plan,k√§mpe){
  po√§ngEmoji = {
    "-1": CIRKEL,
    "0":  KVADRAT,
    "1":  KRYSS,
  }
  
  str√§ng = ["","",""]
  for (let i=0; i < 3; i++){
    str√§ng[i] = ""
    for (let j=0; j < 3; j++){
      str√§ng[i] += po√§ngEmoji[plan[i][j]][0]
    }
  }
  await k√§mpe.send(str√§ng[0])
  await k√§mpe.send(str√§ng[1])
  await k√§mpe.send(str√§ng[2])
};


async function skickaTreIRadUtmaning( plan, EMOJI, k√§mpe, score, igen = false){
  const jagLovarP√•HederOchSamvete = new Promise(async (jagKirrar, jagBajsar) => {
    
    po√§ngEmoji = {
      "-1": CIRKEL,
      "0":  KVADRAT,
      "1":  KRYSS,
    }

    if(EMOJI == KRYSS){
      score = 1
    } else {
      score = -1
    }

    str√§ng = ["","",""]
    for (let i=0; i < 3; i++){
      str√§ng[i] = ""
      for (let j=0; j < 3; j++){
        str√§ng[i] += po√§ngEmoji[plan[i][j]][0]
      }
    }
    
    
    const s√§nt0 = await k√§mpe.send(str√§ng[0])
    const s√§nt1 = await k√§mpe.send(str√§ng[1])
    const s√§nt2 = await k√§mpe.send(str√§ng[2])
    const reaktionsSamlare0 = s√§nt0.createReactionCollector({ time: 40_000 });
    const reaktionsSamlare1 = s√§nt1.createReactionCollector({ time: 40_000 });
    const reaktionsSamlare2 = s√§nt2.createReactionCollector({ time: 40_000 });
    reaktionsSamlare0.on('collect', (reaction, user) => {
      if(reaction.count == 2){
        index = EMOJI.indexOf(reaction._emoji.name)
        if (plan[0][index] == 0){
          plan[0][index] = score
          reaktionsSamlare0.stop();
          reaktionsSamlare1.stop();
          reaktionsSamlare2.stop();
          jagKirrar(plan);
        };
      };
    });
    reaktionsSamlare1.on('collect', (reaction, user) => {
      if(reaction.count == 2){
        index = EMOJI.indexOf(reaction._emoji.name)
        if (plan[1][index] == 0){
          plan[1][index] = score
          reaktionsSamlare0.stop();
          reaktionsSamlare1.stop();
          reaktionsSamlare2.stop();
          jagKirrar(plan);
        };
      };
    });
    reaktionsSamlare2.on('collect', (reaction, user) => {
      if(reaction.count == 2){
        index = EMOJI.indexOf(reaction._emoji.name)
        if (plan[2][index] == 0){
          plan[2][index] = score
          reaktionsSamlare0.stop();
          reaktionsSamlare1.stop();
          reaktionsSamlare2.stop();
          jagKirrar(plan);
        };
      };
    });
    for (let i = 0; i<3; i++){
      s√§nt0.react(EMOJI[i]);
      s√§nt1.react(EMOJI[i]);
      s√§nt2.react(EMOJI[i]);
    }
  });
  return jagLovarP√•HederOchSamvete
};

function harN√•gonVunnitP√•DenH√§rPlanenNuEllerSkaViKanskeK√∂raEnRundaTill(plan){
  let kolonnsummor = [0,0,0]
  let radsummor = [0,0,0]
  let diagonalsummor = [0,0]
  for (let i = 0; i < 3; i++){
      for (let j = 0; j < 3; j++){
          kolonnsummor[j] += plan[i][j]
          radsummor[i] += plan[i][j]
          if(i==j){ diagonalsummor[0] += plan[i][j] }
          if(i==2-j){ diagonalsummor[1] += plan[i][j] }     
      }
  }
  // Max of abs of array
  kolonnsumma = Math.max.apply(null, kolonnsummor.map(Math.abs));
  radsumma = Math.max.apply(null, radsummor.map(Math.abs));
  diagonalsumma = Math.max.apply(null, diagonalsummor.map(Math.abs));
  return Math.max(kolonnsumma, radsumma, diagonalsumma) > 2
}

	
// STEN SAX P√ÖSE!!1
    
async function stensaxp√•se(hurG√•rDet,utmanare,utmanad,igen = false) {
  console.log("B√∂rjar ny stensaxp√•se-match.")
  const [spelareEtt, spelareTv√•] = await Promise.all([skickaUtmaning(utmanare,igen), skickaUtmaning(utmanad,igen)])  
  if (spelareEtt != undefined || spelareTv√• != undefined){
    if (spelareEtt == spelareTv√•) {
      console.log("Det blev lika!")
      hurG√•rDet = await stensaxp√•se(hurG√•rDet,utmanare,utmanad,true)
      return hurG√•rDet
    } else {
    switch(spelareEtt){
      case STEN:
        if(spelareTv√• == SAX){
          hurG√•rDet["vinnare"] = utmanare
        } else {
          hurG√•rDet["vinnare"] = utmanad
        }
        break;
      case SAX:
        if(spelareTv√• == P√ÖSE){
          hurG√•rDet["vinnare"] = utmanare
        } else {
          hurG√•rDet["vinnare"] = utmanad
        }
        break;
      case P√ÖSE:
        if(spelareTv√• == STEN){
          hurG√•rDet["vinnare"] = utmanare
        } else {
          hurG√•rDet["vinnare"] = utmanad
        }
        break;
    }
    hurG√•rDet.j√§ttebra = true
    hurG√•rDet.meddelande = "R√§tt bra faktiskt!"
    hurG√•rDet.vinnare.send("You won! Congratulations :)")
    return hurG√•rDet 
    }
  } else {
  hurG√•rDet.j√§ttebra = false
  return hurG√•rDet
  }
}
async function skickaUtmaning(k√§mpe, igen = false){
  const jagLovarP√•HederOchSamvete = new Promise(async (jagKirrar, jagBajsar) => {
    let pick = undefined
    const filter = (reaction, user) => (reaction.emoji.name == STEN) || (reaction.emoji.name == SAX) || (reaction.emoji.name == P√ÖSE)
    
    if(igen) {
      str√§ng = "hoppsan, det blev visst lika! Vi f√∂rs√∂ker igen :)"
    } else {
      str√§ng = "YOU HAVE BEEN CHALLENGED TO A GAME OF ROCK PAPER SCISSORS! REACT WITH YOUR PICK BELOW!!!1"
    }
    
    const s√§nt = await k√§mpe.send(str√§ng)
    const reaktionsSamlare = s√§nt.createReactionCollector({ filter, time: 20_000 });
    reaktionsSamlare.on('collect', (reaction, user) => {
      if(reaction.count == 2){
        pick = reaction._emoji.name;
        reaktionsSamlare.stop();
      };
    });
    reaktionsSamlare.on('end', (reaction, user) => {
      //return fast async??
      jagKirrar(pick);
    });
    s√§nt.react(P√ÖSE);
    s√§nt.react(STEN);
    s√§nt.react(SAX);
  });
  return jagLovarP√•HederOchSamvete
};


// EMBEDS OCH ANNAT SKIT

const f√∂rklaraVadUtmanaG√∂rIEttFintMeddelandeIngos = new MessageEmbed()
  .setColor('#20993f')
  .setTitle('G4M3R M0D3 4C71V473!')
  .setURL('https://youtube.com/c/CircuzFunPants')
  .setAuthor({ name: 'CL435 7H3 G4M3R', iconURL: "https://raw.githubusercontent.com/Laggan-Gang/Claes/main/gamer_pfp.png", url: 'https://youtube.com/c/CircuzFunPants'})
  .setDescription('√Öh ja... DET H√ÑR √§r gamerl√§ge.')
  .addFields(
    { name: 'Sten Sax P√•se', value: `F√∂r att utmana n√•gon i sten sax p√•se, skriv \n'!utmana @[DERAS ANV√ÑNDARNAMN] stensaxp√•se'.`},
    { name: 'Tre I Rad', value: `F√∂r att utmana n√•gon i tre i rad, skriv \n'!utmana @[DERAS ANV√ÑNDARNAMN] treirad'.`},
  )
  .setFooter({ text: "Om du kan l√§sa det h√§r st√•r du f√∂r n√§ra."})

const explainWhatChallengeDoesInAPrettyMessageEmbed = new MessageEmbed()
  .setColor('#20993f')
  .setTitle('G4M3R M0D3 4C71V473!')
  .setURL('https://youtube.com/c/CircuzFunPants')
  .setAuthor({ name: 'CL435 7H3 G4M3R', iconURL: "https://raw.githubusercontent.com/Laggan-Gang/Claes/main/gamer_pfp.png", url: 'https://youtube.com/c/CircuzFunPants'})
  .setDescription('Oh yeah... THIS is gamer mode.')
  .addFields(
    { name: 'Rock Paper Scissors', value: `To challenge someone for a game of rock paper scissors, type \n'!challenge @[THEIR USERNAME] rockpaperscissors'.`},
    { name: 'Tic Tac Toe', value: `To challenge someone for a game of tic tac toe, type \n'!challenge @[THEIR USERNAME] tictactoe'.`},
  )
  .setFooter({ text: "If you're reading this, you're a n00b"})
